generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  empId            String
  ceId             String
  fName            String
  mName            String?
  lName            String
  nationality      String?
  dob              DateTime?
  gender           Egender?
  maritalStatus    String?
  userMobileNo     String    @unique
  email            String    @unique
  password         String
  fatherName       String?
  motherName       String?
  jobTitle         String?
  workStationId    String?
  aaddharNo        String    @unique
  panNo            String    @unique
  bloodGrp         String?
  uanNo            String?
  passportNo       String?
  healthCardNo     String?
  bankName         String
  ifscCode         String
  bnkacuntNo       String
  grade            String?
  designation      String?
  joiningDate      DateTime?
  confirmationdate DateTime?

  supervisorId String?
  supervisor   User?   @relation("Supervisor", fields: [supervisorId], references: [id])

  payslipDetails Payslip[] @relation("whosepayslip")
  payslipCreated Payslip[] @relation("userCreatedPayslip")

  departmentId String?
  department   Department? @relation("UserInwhichDept", fields: [departmentId], references: [id])

  branchId String
  branch   OffcBranch @relation(fields: [branchId], references: [id])

  branchCreated OffcBranch[] @relation("userCreatedbranch")
  branchUpdated OffcBranch[] @relation("userUpdatedbranch")

  confirmedById String?
  confirmedBy   User?   @relation("ConfirmedBy", fields: [confirmedById], references: [id])

  modifiedById String?
  modifiedBy   User?   @relation("ModifiedBy", fields: [modifiedById], references: [id])

  createdById String?
  createdBy   User?   @relation("CreatedBy", fields: [createdById], references: [id])

  payroll Payrolldetail[] @relation("whosePayroll")

  lastModified DateTime?

  empStatus           UserStatus          @default(ACTIVE)
  payrollAssignStatus PayrollAssignStatus @default(ACTIVE)

  nominee   Nominee?
  Addresses Address?

  skils        UserSkils[]
  educations   Education[]
  certificates Certificate[]
  languages    Language[]

  profilePicEnabled  Boolean @default(false)
  profilePicFileName String?
  fileDir            String?

  UserConfirmed User[] @relation("ConfirmedBy")
  UserModified  User[] @relation("ModifiedBy")
  UserSup       User[] @relation("Supervisor")
  UserCreateBy  User[] @relation("CreatedBy")

  allowanceCreated allowanceType[] @relation("userCreateAllowanceType")
  deductionCreated deductionType[] @relation("userCreateDeductionType")

  departmentsCreated Department[] @relation("userCreateDept")
  departmentsUpdated Department[] @relation("userUpdatedDept")

  payrollCreated Payrolldetail[] @relation("payrollCreateByUser")
  payrollUpdated Payrolldetail[] @relation("payrollUpdateByUser")

  assignedProjects    Project[] @relation("assignedProjects")
  projectlead         Project[] @relation("userislead")
  usercreateProject   Project[] @relation("usercreateProject")
  usermodifiedProject Project[] @relation("usermodifiedProject")

  ProjectClientCreate ProjectClient[] @relation("userCreateClient")
  ProjectClientUpdate ProjectClient[] @relation("userUpdateClient")
  leaveType           leaveType[]
  Timesheets          Timesheets[]
  ExpenselogApplied   Expenselog[]    @relation("UserAppliedExpenseLog")
  ExpenselogUpdated   Expenselog[]    @relation("UserUpdatedExpenseLog")
  salarylogs          salarylogs[]
  leavemaster         leavemaster[]

  leaveAssignUserCreated  leaveAssignUser[] @relation("UserCreatedleaveAssignUser")
  leaveAssignUserUpdated  leaveAssignUser[] @relation("UserUpdatedleaveAssignUser")
  leaveAssignUserAssigned leaveAssignUser[] @relation("UserAssignedleaveAssignUser")
  leavelog_appliedby      leavelog[]        @relation("appliedByuserId")
  leavelog_updatedBy      leavelog[]        @relation("updatedByuserId")

  maillog       maillog[]
  Task_created  Task[]     @relation("createdById")
  Task_modified Task[]     @relation("modifiedById")
  UserRole      userRole[]
}

model userRole {
  roleId String
  userId String

  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
}

// user
model maillog {
  id         String @id @default(uuid())
  authUserId String
  authUser   User   @relation(fields: [authUserId], references: [id])

  mailFrom     String
  mailTo       String
  mailSubject  String
  mailBody     String
  mailResponse Json
  description  String?
}

// user
model salarylogs {
  id                  String  @id @default(uuid())
  salaryInitiatedBy   User?   @relation(fields: [salaryInitiatedById], references: [id])
  salaryInitiatedById String?

  salaryPaydetailIdList Payslip[]
  financialYear         String?
  totalAmount           Int
  issuedDate            DateTime
  salaryYearMonth       DateTime
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model otplog {
  id           String   @id @default(uuid())
  createdAt    DateTime
  otpVal       String
  otpCreatedAt DateTime
  email        String
  description  String?
  active       Boolean  @default(false)
}

// department, ProjectClient
model Project {
  id          String        @id @default(uuid())
  projectCode String
  projectName String
  status      ProjectStatus

  assignUsers User[]  @relation("assignedProjects")
  description String?

  projectLeadId String?
  projectLead   User?   @relation("userislead", fields: [projectLeadId], references: [id])

  createdBy   User?   @relation("usercreateProject", fields: [createdById], references: [id])
  createdById String?

  modifiedBy   User?   @relation("usermodifiedProject", fields: [modifiedById], references: [id])
  modifiedById String?

  departmentId    String?
  department      Department?    @relation(fields: [departmentId], references: [dptId])
  ProjectClient   ProjectClient? @relation(fields: [projectClientId], references: [id])
  projectClientId String?

  Timesheets Timesheets[]
  expenses   Expenselog?
  tasks      Task[]
}

// user, project
model Timesheets {
  id       String @id @default(uuid())
  empid    String
  employee User   @relation(fields: [empid], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  date      DateTime
  enterTime DateTime
  exitTime  DateTime

  task        String
  description String?
}

// user,projectid
model Task {
  id          String       @id @default(uuid())
  taskId      String
  taskName    String
  description String?
  priority    TaskPriority
  status      TaskStatus

  createdBy    User?   @relation("createdById", fields: [createdById], references: [id])
  modifiedBy   User?   @relation("modifiedById", fields: [modifiedById], references: [id])
  modifiedById String?
  createdById  String?

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
}

//user,project,
model Expenselog {
  id          String  @id @default(uuid())
  appliedById String?
  appliedBy   User?   @relation("UserAppliedExpenseLog", fields: [appliedById], references: [id])

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id])

  remarks          String?
  description      String?
  fileDir          String
  billFilesEnabled Boolean
  billFiles        String[]
  updatedOn        DateTime      @updatedAt
  totalAmount      Int
  status           Int
  updatedBy        User?         @relation("UserUpdatedExpenseLog", fields: [updatedById], references: [id])
  updatedById      String?
  expenses         expenceList[]
}

// Expenselog
model expenceList {
  id           String     @id @default(uuid())
  date         DateTime
  amount       Int
  descriptions String
  expenseid    String
  expense      Expenselog @relation(fields: [expenseid], references: [id])
}

//user
model leaveType {
  id          String  @id @default(uuid())
  name        String
  shortname   String
  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?
  description String?
}

// ready
model financeyearlists {
  id              String   @id @default(uuid())
  financeyearname String
  startDate       DateTime
  endDate         DateTime
  activeStatus    Int
}

//user
model ProjectClient {
  id            String    @id @default(uuid())
  clientCode    String
  clientName    String
  address       String?
  clientEmailId String
  projects      Project[]
  description   String?

  createdBy    User?   @relation("userCreateClient", fields: [createdById], references: [id])
  modifiedBy   User?   @relation("userUpdateClient", fields: [modifiedById], references: [id])
  createdById  String?
  modifiedById String?
}

model Nominee {
  id              String @id @default(uuid())
  status          Int
  nomineeName     String
  nonineeAaaddhar String

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

//user
model Payrolldetail {
  id String @id @default(uuid())

  createdBy   User?   @relation("payrollCreateByUser", fields: [createdById], references: [id])
  createdById String?
  updatedBy   User?   @relation("payrollUpdateByUser", fields: [updatedById], references: [id])
  updatedById String?

  payrollUser   User?   @relation("whosePayroll", fields: [payrollUserId], references: [id])
  payrollUserId String?

  allowances Allowance[]
  deductions Deduction[]

  upDateOn        DateTime @updatedAt
  isPayableStatus Int      @default(1)
  baseSalary      Int

  payslips Payslip[]
}

//user
model Payslip {
  id         String @id @default(uuid())
  employeeId String
  employee   User   @relation("whosepayslip", fields: [employeeId], references: [id])

  baseSalary    Int
  gettingAmount Int
  amountInWords Int

  createdAt  DateTime @default(now())
  issuedDate DateTime

  payrollId      String
  payrollDetails Payrolldetail @relation(fields: [payrollId], references: [id])

  salarylogs   salarylogs? @relation(fields: [salarylogsId], references: [id])
  salarylogsId String?

  createdBy   User?   @relation("userCreatedPayslip", fields: [createdById], references: [id])
  createdById String?
}

// Payrolldetail
model Allowance {
  id     String @id @default(uuid())
  name   String
  amount Int

  payrollDetail   Payrolldetail @relation(fields: [payrollDetailId], references: [id])
  payrollDetailId String
}

// Payrolldetail
model Deduction {
  id              String        @id @default(uuid())
  name            String
  amount          Int
  payrollDetail   Payrolldetail @relation(fields: [payrollDetailId], references: [id])
  payrollDetailId String
}

model Address {
  id       String      @id @default(uuid())
  address  String
  city     String
  district String
  state    String
  country  String
  pincode  String
  type     AddressType
  userid   String      @unique
  user     User        @relation(fields: [userid], references: [id])
}

model UserSkils {
  id          String  @id @default(uuid())
  skillId     String
  skillName   String
  description String?

  user User[]
}

// done
model Department {
  id          String  @id @default(uuid())
  dptId       String  @unique
  dptName     String
  description String?

  createdBy   User?   @relation("userCreateDept", fields: [createdByid], references: [id])
  createdByid String?

  modifiedBy   User?   @relation("userUpdatedDept", fields: [modifiedById], references: [id])
  modifiedById String?

  User     User[]    @relation("UserInwhichDept")
  projects Project[]
}

// done
model OffcBranch {
  id          String  @id @default(uuid())
  officeName  String
  officeCode  String
  description String
  remarks     String?
  country     String
  createdbyId String?
  createdBy   User?   @relation("userCreatedbranch", fields: [createdbyId], references: [id])

  modifiedbyId String?
  modifiedby   User?   @relation("userUpdatedbranch", fields: [modifiedbyId], references: [id])

  address String
  empList User[]
}

// done
model Education {
  id          String  @id @default(uuid())
  eduName     String
  description String?

  user User[]
}

// done
model Certificate {
  id          String  @id @default(uuid())
  cerName     String
  description String?
  user        User[]
}

// done
model Language {
  id          String  @id @default(uuid())
  language    String
  description String?

  user User[]
}

//user
model allowanceType {
  id          String  @id @default(uuid())
  name        String
  shortName   String
  createdBy   User?   @relation("userCreateAllowanceType", references: [id], fields: [createdbyId])
  createdbyId String?
  description String?
}

//user
model deductionType {
  id          String  @id @default(uuid())
  name        String
  shortName   String
  createdBy   User?   @relation("userCreateDeductionType", references: [id], fields: [createdbyId])
  createdbyId String?
  description String?
}

//user
model leavemaster {
  id            String   @id @default(uuid())
  financialYear String
  startDate     DateTime
  endDate       DateTime
  description   String?

  createdBy   User?        @relation(fields: [createdById], references: [id])
  createdById String?
  leave_count leaveCount[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model leaveCount {
  id        String @id @default(uuid())
  leavetype String
  value     Int

  leavemaster   leavemaster @relation(fields: [leavemasterId], references: [id])
  leavemasterId String
}

//user
model leaveAssignUser {
  id            String @id @default(uuid())
  financialYear String

  createdBy  User? @relation("UserCreatedleaveAssignUser", fields: [createdBy_userId], references: [id])
  assignUser User? @relation("UserAssignedleaveAssignUser", fields: [assignUser_userId], references: [id])
  updatedBy  User? @relation("UserUpdatedleaveAssignUser", fields: [updatedBy_userid], references: [id])

  createdBy_userId  String?
  assignUser_userId String?
  updatedBy_userid  String?
  updatedOn         DateTime?
  description       String?

  leaveMaintain leaveMaintain[]
}

model leaveMaintain {
  id                String          @id @default(uuid())
  key               String
  value             Int
  leaveAssignUser   leaveAssignUser @relation(fields: [leaveAssignUserId], references: [id])
  leaveAssignUserId String
}

// user done
model leavelog {
  id        String @id @default(uuid())
  appliedBy User?  @relation("appliedByuserId", fields: [appliedByuserId], references: [id])
  updatedBy User?  @relation("updatedByuserId", fields: [updatedByuserId], references: [id])

  leavetype   String
  startDate   DateTime
  endDate     DateTime
  leaveDays   Int
  status      Int
  updatedOn   DateTime?
  description String?

  appliedByuserId String?
  updatedByuserId String?
}

//done
model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  roleMenus RoleMenu[]
  userRoles userRole[]
}

//done
model MenuItem {
  id        String     @id @default(uuid())
  label     String
  icon      String
  path      String?
  parentId  String?
  parent    MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemToMenuItem")
  roleMenus RoleMenu[]
}

// done
model RoleMenu {
  roleId     String
  menuItemId String

  role     Role     @relation(fields: [roleId], references: [id])
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@id([roleId, menuItemId])
}

enum UserStatus {
  ACTIVE
  ONHOLD
  TERMINATED
  RESIGNED
}

enum PayrollAssignStatus {
  ACTIVE
  PENDING
}

enum ProjectStatus {
  PENDING
  ACTIVE
  COMPLETED
  INACTIVE
}

enum Egender {
  male
  female
  other
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  INPROGRESS
  COMPLETED
  BLOCKED
}

enum AddressType {
  CURRENT
  PERMANENT
}
