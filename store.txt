async function M_user() {
  try {
    await mongoClient.connect();

    const mongoDb = mongoClient.db("myhrmTestdb");
    const Usercollection = mongoDb.collection("users");
    const allowanceCollection = mongoDb.collection("allowancetypes");

    const cursor = Usercollection.find();

    for await (const doc of cursor) {
      const userId = doc._id.toString();

      
      const allowances = await allowanceCollection.find({ createdBy: userId }).toArray();

      
      const allowanceData = allowances.map(a => ({
        
        name: a.name,
        description: a.description,
        shortName:a.shortName,
        id:a._id.toString()
      }));

      await prisma.user.create({

        data: {
          aaddharNo: doc.aaddharNo,
          bankName: doc.bankName,
          bnkacuntNo: doc.bnkacuntNo,
          ceId: doc.ceId,
          email: doc.email,
          empId: doc.empId,
          fName: doc.fName,
          ifscCode: doc.ifscCode,
          lName: doc.lName,
          panNo: doc.panNo,
          password: doc.password,
          userMobileNo: doc.userMobileNo,

          allowanceCreated: {
            create: allowanceData
          },
          assignedProjects :{
            
          }
        }
      });
    }
  } catch (error) {
    console.error("Error migrating users:", error);
  }
}


async function departments () {
  
  try {
    await mongoClient.connect();

    const mongoDb = mongoClient.db("myhrmTestdb");
    const collection = mongoDb.collection("departments");

    const cursor = collection.find();

    for await (const doc of cursor) {
      await prisma.department.create({
        data:{
          description : doc.description,
          dptId:doc.dptId,
          dptName:doc.dptName,
          id :doc._id.toString(),

        }
      })
    }
  } catch (error) {
    
  }
}